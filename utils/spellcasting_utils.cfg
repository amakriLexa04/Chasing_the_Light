#textdomain wesnoth-ctl

#############################
# RESELECT SKILLS
#############################
#define RESELECT_SKILLS_AFTER_OBJECTIVES CASTER WML_BEFORE WML_AFTER
    # doing things after showing objectives is hard. This approximates it.
    [listen_for_mousemove]
    [/listen_for_mousemove]
    [event]
        name=mousemove_synced
        [do_command]
            [fire_event]
                raise=mousemove # convert to a synced context
            [/fire_event]
        [/do_command]
    [/event]
    [event]
        name=select
        [do_command]
            [fire_event]
                raise=mousemove # convert to a synced context
            [/fire_event]
        [/do_command]
    [/event]
    [event]
        name=mousemove,recruit,recall,side 1 turn end
        {WML_BEFORE}
		{VARIABLE current_caster {CASTER}}
        [select_caster_skills]
		id = {CASTER}
        [/select_caster_skills]
        {CLEAR_VARIABLE ("spellcasted_this_turn_" + {CASTER})}
        {FIRE_EVENT ("refresh_" + {CASTER} + "_skills")}
        {WML_AFTER}
    [/event]
#enddef

#define GLOBAL__SPELLCASTING_EVENTS

    #--------------------
    # NEW TURN RESET
    #--------------------
    [event]
        name=new turn
        first_time_only=no
		[lua]
        code= <<
		    local units = wesnoth.units.find()
			
			for i,u in ipairs(units) do
			    if  wml.variables["caster_" .. u.id] then
				    wml.variables["caster_" .. u.id .. ".spellcasted_this_turn"] = nil
				    wml.variables["caster_" .. u.id .. ".disable_xp_message"] = nil
				end
			end
			
			units = nil
	    >>
	    [/lua]
    [/event]
	
	
	[event]
        name=prestart
        first_time_only=yes
		
        ##[lua]
        ##code= <<
        ##    local caster_data = wesnoth.dofile(wml.variables["path_to_casters"])
        ##    local casters = caster_data.casters
		##    
        ##    local caster_ids = {}
		##    
        ##    for k=0,#casters,1 do
        ##        table.insert(caster_ids, casters[k].id)
        ##    end
		##    
        ##    local caster_ids_str = table.concat(caster_ids, ",")
        ##    wesnoth.set_variable("casters_ids", caster_ids_str)
        ##>>
        ##[/lua]
	
	[/event]
	
	
    #--------------------
    # PREVENT LEVELING
    #--------------------
    [event]
        name=pre advance
        first_time_only=no
		#[filter]
		#id=$casters_ids
		#[not]
		#type=haralin_0
		#[/not]
		#[/filter]
        #[modify_unit]
        #    {FILTER id=$unit.id}
        #    experience=$($unit.max_experience-1)
        #[/modify_unit]
        #[if] {VARIABLE_CONDITIONAL ("disable_xp_message_" + $unit.id) not_equals yes} {THEN([floating_text]
        #    x,y,text=$unit.x,$unit.y,_"<span color='#a308b8' size='small'>Max XP!</span>"
        #[/floating_text])}
		#[/if]
        #{VARIABLE ("disable_xp_message_" + $unit.id) yes}
    [/event]


    #--------------------
    # CAST SKILL IN A SYNCED CONTEXT
    #--------------------
    # don't do this directly from spellcasting.lua, or we get OOS replays and the player can undo
    [event]
        name=cast_skill_synced
        first_time_only=no
        [do_command]
            [fire_event]
                raise=$skill_id
            [/fire_event]
        [/do_command]
        {CLEAR_VARIABLE skill_id}
    [/event]

    #--------------------
    # PREVENT BADLY-TIMED SPELLS
    #--------------------
    [event]
        name=attack
        first_time_only=no
        {VARIABLE is_during_attack yes}
    [/event]
    [event]
        name=attack end
        first_time_only=no
        {CLEAR_VARIABLE is_during_attack}
    [/event]
    [event]
        name=start,turn refresh
        first_time_only=no
		#[lua]
        #code= <<
		#    local caster_data = wesnoth.dofile(wml.variables["path_to_casters"])
        #    local casters = caster_data.casters
	    #    for k=0,#casters,1 do
		#	    local caster_unit = (wesnoth.units.find_on_map({id = casters[k].id})) [1]
		#		if caster_unit.side ~= wml.variables["side_number"] then
        #            wml.variables["not_" .. casters[k].id .. "_turn"] = 'dummy'
		#		end
		#		caster_unit = nil
		#	end
	    #>>
	    #[/lua]
    [/event]
    [event]
        name=turn refresh
        first_time_only=no
        #[lua]
        #code= <<
		#    local caster_data = wesnoth.dofile(wml.variables["path_to_casters"])
        #    local casters = caster_data.casters
	    #    for k=0,#casters,1 do
		#	    local caster_unit = (wesnoth.units.find_on_map({id = casters[k].id})) [1]
		#		if caster_unit.side == wml.variables["side_number"] then
        #            wml.variables["not_" .. casters[k].id .. "_turn"] = nil
		#		end
		#		caster_unit = nil
		#	end
	    #>>
	    #[/lua]
    [/event]
	
#enddef