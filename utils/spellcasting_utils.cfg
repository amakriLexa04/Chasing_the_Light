#textdomain wesnoth-ctl

#############################
# RESELECT SKILLS
#############################
#define RESELECT_SKILLS_AFTER_OBJECTIVES CASTER WML_BEFORE WML_AFTER
    # doing things after showing objectives is hard. This approximates it.
    [listen_for_mousemove]
    [/listen_for_mousemove]
    [event]
        name=mousemove_synced
        [do_command]
            [fire_event]
                raise=mousemove # convert to a synced context
            [/fire_event]
        [/do_command]
    [/event]
    [event]
        name=select
        [do_command]
            [fire_event]
                raise=mousemove # convert to a synced context
            [/fire_event]
        [/do_command]
    [/event]
    [event]
        name=mousemove,recruit,recall,side 1 turn end
        {WML_BEFORE}
		{VARIABLE current_caster {CASTER}}
        [select_caster_skills]
		id = {CASTER}
        [/select_caster_skills]
        {CLEAR_VARIABLE ("spellcasted_this_turn_" + {CASTER})}
		[refresh_skills]
		id = {CASTER}
		[/refresh_skills]
        {WML_AFTER}
    [/event]
#enddef

#define GLOBAL__SPELLCASTING_EVENTS

    #--------------------
    # NEW TURN RESET
    #--------------------
    [event]
        name=new turn
        first_time_only=no
		[lua]
        code= <<
		    local units = wesnoth.units.find()
			
			for i,u in ipairs(units) do
			    if  wml.variables["caster_" .. u.id] then
				    wml.variables["caster_" .. u.id .. ".spellcasted_this_turn"] = nil
				    wml.variables["caster_" .. u.id .. ".disable_xp_message"] = nil
				end
			end
			
			units = nil
	    >>
	    [/lua]
    [/event]
	
	
    #--------------------
    # PREVENT LEVELING
    #--------------------
    [event]
        name=pre advance
        first_time_only=no
		[lua]
        code= <<
			local advancing_unit = wesnoth.units.find_on_map({x = wml.variables["unit.x"], y = wml.variables["unit.y"]})[1]
			local _ = wesnoth.textdomain "wesnoth-ctl"

			if  wml.variables["caster_" .. advancing_unit.id] then
			    advancing_unit.experience = advancing_unit.max_experience - 1
			    if not wml.variables["caster_" .. advancing_unit.id .. ".disable_xp_message"] then
			        wml.fire("floating_text", ({x = advancing_unit.x, y = advancing_unit.y, text=(_"<span color='#a308b8' size='small'>Max XP!</span>")}))
				end
				wml.variables["caster_" .. advancing_unit.id .. ".disable_xp_message"] = true
			end
			
			advancing_unit = nil
	    >>
	    [/lua]
    [/event]


    #--------------------
    # CAST SKILL IN A SYNCED CONTEXT
    #--------------------
    # don't do this directly from spellcasting.lua, or we get OOS replays and the player can undo
    [event]
        name=cast_skill_synced
        first_time_only=no
        [do_command]
            [fire_event]
                raise=$skill_id
            [/fire_event]
        [/do_command]
        {CLEAR_VARIABLE skill_id}
    [/event]

    #--------------------
    # PREVENT BADLY-TIMED SPELLS
    #--------------------
    [event]
        name=attack
        first_time_only=no
        {VARIABLE is_during_attack yes}
    [/event]
    [event]
        name=attack end
        first_time_only=no
        {CLEAR_VARIABLE is_during_attack}
    [/event]
    [event]
        name=start,turn refresh
        first_time_only=no
		[lua]
        code= <<
            local units = wesnoth.units.find_on_map()
            
			for i,u in ipairs(units) do
			    if  wml.variables["caster_" .. u.id] then
				    if u.side ~= wml.variables["side_number"] then
					    wml.variables["caster_" .. u.id .. ".not_caster_turn"] = 'dummy'
				    elseif u.side == wml.variables["side_number"] then
				        wml.variables["caster_" .. u.id .. ".not_caster_turn"] = nil
					end
				end
			end
			
			units = nil
	    >>
	    [/lua]
    [/event]
	
#enddef