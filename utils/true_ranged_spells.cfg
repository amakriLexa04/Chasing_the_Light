#textdomain wesnoth-ctl

##base for adjacent spells
[lua]
    code= <<
	
    function adjacent_spell(caster_id, radius, image, ignore_units, event_spell, gold_cancel, xp_cancel)
    local unit_id = caster_id
    local selected_target_hexes = {}

    wesnoth.interface.allow_end_turn(false)

	wml.variables["no_spellcasting_event_" .. unit_id] = 'dummy'

    local unit_to_modify = (wesnoth.units.find_on_map({id = unit_id})) [1]

    local unit_to_modify_attacks = unit_to_modify.attacks_left
    local unit_to_modify_moves = unit_to_modify.moves
    local unit_to_modify_x = unit_to_modify.x
    local unit_to_modify_y = unit_to_modify.y

    unit_to_modify.attacks_left = 0
    unit_to_modify.moves = 0

    local function place_image(x, y)
        wesnoth.wml_actions.item({
            x = x,
            y = y,
            image = image
        })
    end

    local function remove_image()
        wesnoth.wml_actions.remove_item({
            image = image
        })
    end

    for xx = unit_to_modify_x - radius, unit_to_modify_x + radius do
        for yy = unit_to_modify_y - radius, unit_to_modify_y + radius do
            if wesnoth.map.distance_between(unit_to_modify_x, unit_to_modify_y, xx, yy) <= radius then
                local target_units = (wesnoth.units.find_on_map({ x = xx, y = yy }))
                local has_unit = #target_units > 0
                if (not ignore_units or not has_unit) and (xx ~= unit_to_modify_x or yy ~= unit_to_modify_y) then
                    place_image(xx, yy)
                    table.insert(selected_target_hexes, { x = xx, y = yy })
                end
            end
        end
    end

    local function on_click_event()
        local clicked_x, clicked_y = wesnoth.interface.get_hovered_hex()
        for _, target_hex in ipairs(selected_target_hexes) do
            if clicked_x == target_hex.x and clicked_y == target_hex.y then
                wml.variables["unit_to_cast_on_x"] = clicked_x
				wml.variables["unit_to_cast_on_y"] = clicked_y
                wesnoth.interface.add_chat_message("Info", "Cast spell!")
                remove_image()
                wml.fire("redraw")
                wesnoth.game_events.on_mouse_button = nil

                wml.variables["distance_between_units"] = (wesnoth.map.distance_between(unit_to_modify_x, unit_to_modify_y, clicked_x, clicked_y) * 72)

                wesnoth.game_events.fire(event_spell)

                unit_to_modify.attacks_left = unit_to_modify_attacks
                unit_to_modify.moves = unit_to_modify_moves - 1

				wml.variables["no_spellcasting_event_" .. caster_id] = nil

                wesnoth.interface.allow_end_turn(true)

                wesnoth.units.select()
                return
            end
        end
        wesnoth.interface.add_chat_message("Info", "Cancel spell!")
        remove_image()
        wml.fire("redraw")
        wesnoth.game_events.on_mouse_button = nil

        unit_to_modify.attacks_left = unit_to_modify_attacks
        unit_to_modify.moves = unit_to_modify_moves
        unit_to_modify.experience = unit_to_modify.experience + xp_cancel
		wesnoth.sides[unit_to_modify.side].gold =wesnoth.sides[unit_to_modify.side].gold  + gold_cancel

		wml.variables["no_spellcasting_event_" .. caster_id] = nil
		wml.variables["spellcasted_this_turn_" .. caster_id] = nil

        wesnoth.interface.allow_end_turn(true)

        wesnoth.units.select()
    end

    wesnoth.game_events.on_mouse_button = function(screen_x, screen_y, button, pressed)
        if pressed and button == "left" then
            on_click_event()
        end
    end
end
    
    >>
[/lua]

#define CTL_ADJACENT_SPELL caster_id radius image ignore_units event_spell gold_cancel xp_cancel

    {VARIABLE adjacent_spell_radius {radius}}
    {VARIABLE adjacent_spell_caster_id {caster_id}}
    {VARIABLE adjacent_spell_image {image}}
    {VARIABLE adjacent_spell_ignore_units {ignore_units}}
    {VARIABLE adjacent_spell_event_spell {event_spell}}
    {VARIABLE adjacent_gold_cancel {gold_cancel}}
    {VARIABLE adjacent_xp_cancel {xp_cancel}}

    [lua]
            code= <<
		    adjacent_spell(wesnoth.get_variable("adjacent_spell_caster_id"),
			wesnoth.get_variable("adjacent_spell_radius"),
			wesnoth.get_variable("adjacent_spell_image"),
			wesnoth.get_variable("adjacent_spell_ignore_units"),
			wesnoth.get_variable("adjacent_spell_event_spell"),
			wesnoth.get_variable("adjacent_gold_cancel"),
			wesnoth.get_variable("adjacent_xp_cancel"))

            wesnoth.interface.delay(300)
            wesnoth.units.select()
	        wesnoth.interface.deselect_hex()
            wml.fire("redraw")
		>>
    [/lua]
	
	{CLEAR_VARIABLE adjacent_spell_radius}
	{CLEAR_VARIABLE adjacent_spell_caster_id}
    {CLEAR_VARIABLE adjacent_spell_image}
    {CLEAR_VARIABLE adjacent_spell_ignore_units}
    {CLEAR_VARIABLE adjacent_spell_event_spell}
    {CLEAR_VARIABLE adjacent_gold_cancel}
    {CLEAR_VARIABLE adjacent_xp_cancel}

#enddef



[lua]
    code= <<
	
    function ranged_spell(caster_id, radius, image, allied_only, ignore_caster, event_spell, gold_cancel, experience_cancel)
    local unit_id = caster_id
    local selected_target_units = {}
	
	wesnoth.interface.allow_end_turn(false)
	
	wml.variables["no_spellcasting_event_" .. unit_id] = 'dummy'

    local unit_to_modify = (wesnoth.units.find_on_map({id = unit_id})) [1]

    local unit_to_modify_attacks = unit_to_modify.attacks_left
    local unit_to_modify_moves = unit_to_modify.moves
	wml.variables["unit_to_modify_x"] = unit_to_modify.x
	wml.variables["unit_to_modify_y"] = unit_to_modify.y

    unit_to_modify.attacks_left = 0
    unit_to_modify.moves = 0

    local function place_image(x, y)
        wesnoth.wml_actions.item({
            x = x,
            y = y,
            image = image
			--halo= image
        })
    end

    local function remove_image()
        wesnoth.wml_actions.remove_item({
            image = image
			--halo= image
        })
    end

    local function is_allied(unit, side)
        return wesnoth.sides[unit.side].team_name == wesnoth.sides[side].team_name
    end

    local x, y = unit_to_modify.x, unit_to_modify.y
    for xx = x - radius, x + radius do
        for yy = y - radius, y + radius do
            if wesnoth.map.distance_between(x, y, xx, yy) <= radius then
                local target_units = wesnoth.units.find_on_map({ x = xx, y = yy })
                if #target_units > 0 then
                    local target_unit = target_units[1]
                    if (allied_only == "all" or (allied_only == true and is_allied(target_unit, unit_to_modify.side)) or (allied_only == false and not is_allied(target_unit, unit_to_modify.side))) and (not ignore_caster or target_unit.id ~= unit_id) then
                        place_image(xx, yy)
                        table.insert(selected_target_units, {x = xx, y = yy})
                    end
                end
            end
        end
    end

    local function on_click_event()
        local clicked_x, clicked_y = wesnoth.interface.get_hovered_hex()
        for _, target_unit in ipairs(selected_target_units) do
            if (clicked_x == target_unit.x and clicked_y == target_unit.y) then
				wml.variables["unit_to_cast_on_x"] = clicked_x
				wml.variables["unit_to_cast_on_y"] = clicked_y
                wesnoth.interface.add_chat_message("Info", "Cast spell!")
                remove_image()
                wml.fire("redraw")
                wesnoth.game_events.on_mouse_button = nil
				
				wml.variables["distance_between_units"] = (wesnoth.map.distance_between(unit_to_modify.x, unit_to_modify.y, clicked_x, clicked_y)*72)
				
                wesnoth.game_events.fire(event_spell)
				
				unit_to_modify.attacks_left = unit_to_modify_attacks
                unit_to_modify.moves = unit_to_modify_moves - 1
				
				wml.variables["no_spellcasting_event_" .. unit_id] = nil
                wml.variables["unit_to_modify_attacks"] = nil
			    wml.variables["unit_to_modify_moves"] = nil
				
				wesnoth.interface.allow_end_turn(true)

				wesnoth.units.select()
                return
            end
        end
        wesnoth.interface.add_chat_message("Info", "Cancel spell!")
        remove_image()
        wml.fire("redraw")
        wesnoth.game_events.on_mouse_button = nil
		
		unit_to_modify.attacks_left = unit_to_modify_attacks
        unit_to_modify.moves = unit_to_modify_moves
		unit_to_modify.experience = unit_to_modify.experience + experience_cancel
		wesnoth.sides[unit_to_modify.side].gold =wesnoth.sides[unit_to_modify.side].gold  + gold_cancel

		wml.variables["spellcasted_this_turn_" .. unit_id] = nil
		wml.variables["no_spellcasting_event_" .. unit_id] = nil
        wml.variables["unit_to_modify_attacks"] = nil
		wml.variables["unit_to_modify_moves"] = nil
		
		wesnoth.interface.allow_end_turn(true)

        wesnoth.units.select()
    end

    wesnoth.game_events.on_mouse_button = function(screen_x, screen_y, button, pressed)
    if (pressed and button == "left") then
        on_click_event()
    end
end
end
    
    >>
[/lua]

#define CTL_RANGED_SPELL caster_id radius image allied_only ignore_caster event_spell gold_cancel xp_cancel

    {VARIABLE ranged_spell_caster_id {caster_id}}
    {VARIABLE ranged_spell_radius {radius}}
    {VARIABLE ranged_spell_image {image}}
	{VARIABLE ranged_spell_allied_only {allied_only}}
    {VARIABLE ranged_spell_ignore_caster {ignore_caster}}
    {VARIABLE ranged_spell_event_spell {event_spell}}
    {VARIABLE ranged_gold_cancel {gold_cancel}}
    {VARIABLE ranged_xp_cancel {xp_cancel}}

    [lua]
            code= <<
		    ranged_spell(wesnoth.get_variable("ranged_spell_caster_id"),
			wesnoth.get_variable("ranged_spell_radius"),
			wesnoth.get_variable("ranged_spell_image"),
			wesnoth.get_variable("ranged_spell_allied_only"),
			wesnoth.get_variable("ranged_spell_ignore_caster"),
			wesnoth.get_variable("ranged_spell_event_spell"),
			wesnoth.get_variable("ranged_gold_cancel"),
			wesnoth.get_variable("ranged_xp_cancel"))

            wesnoth.interface.delay(300)
            wesnoth.units.select()
	        wesnoth.interface.deselect_hex()
            wml.fire("redraw")
		>>
    [/lua]
	
	{CLEAR_VARIABLE ranged_spell_radius}
	{CLEAR_VARIABLE ranged_spell_caster_id}
    {CLEAR_VARIABLE ranged_spell_image}
    {CLEAR_VARIABLE ranged_spell_ignore_units}
    {CLEAR_VARIABLE ranged_spell_event_spell}
    {CLEAR_VARIABLE ranged_gold_cancel}
    {CLEAR_VARIABLE ranged_xp_cancel}

#enddef